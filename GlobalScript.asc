// Automatically converted interaction variables
int IntVar_Global_1 = 0;
export IntVar_Global_1;
// Main game global script file

String name, invent,idont; 

#sectionstart unhandled_event  // DO NOT EDIT OR REMOVE THIS LINE
function unhandled_event (int what, int type) {
  name= Game.GetLocationName(mouse.x,mouse.y);
 if ((what==1) && (type==1)) // Look at hotspot
   player.Say(" ");
 else if ((what==1) && (type==2)) // Interact with hotspot
   player.Say(" "); 
 else if ((what==1) && (type==3)) // Use inventory on hotspot
   player.Say(" ");       
 else if ((what==1) && (type==4)) // Talk to hotspot
   player.Say(" ");
 else if ((what==1) && (type==7)) // Pick up hotspot
   player.Say(" ");
 else if ((what==2) && (type==0)) // Look at object
   player.Say(" ");
 else if ((what==2) && (type==1)) // Interact with object
   player.Say(" ");
 else if ((what==2) && (type==2)) // Talk to object
   player.Say(" ");
 else if ((what==2) && (type==3)) // Use inventory on object
   player.Say("Que intentas lograr con eso???");
 else if ((what==2) && (type==5)) // Pick up object
   player.Say(" ");
 else if ((what==3) && (type==0)) // Look at character
   player.Say(" ");
 else if ((what==3) && (type==1)) // Interact with character
   player.Say(" ");
 else if ((what==3) && (type==2)) // Speak to character
   player.Say(" ");
 else if ((what==3) && (type==3)) // Use inventory on character
   player.Say(" ");
 else if ((what==5) && (type==0)) // Look at inventory
   player.Say(" ");
 else if ((what==5) && (type==1)) // Interact with inventory (currently not possible) 
   player.Say(" ");
 else if ((what==5) && (type==2)) // Speak to inventory
   player.Say(" ");
 else if ((what==5) && (type==3))  // Use an inventory item on another
   player.Say(" ");         
 else if ((what==5) && (type==4)) // Other click on inventory
   player.Say(" "); 
}
#sectionend unhandled_event  // DO NOT EDIT OR REMOVE THIS LINE


#sectionstart unhandled2  // DO NOT EDIT OR REMOVE THIS LINE
function unhandled2() {
  if      (GetGlobalInt(80)==1)   player.Say("No se cierra!");                  // close
  else if (GetGlobalInt(80)==2)   player.Say("");                               // give
  else if (GetGlobalInt(80)==3)   player.Say("No se abre!");                    // open
  else if (GetGlobalInt(80)==4)   player.Say("No puedo empujarlo!");            // push
  else if (GetGlobalInt(80)==5)   player.Say("No puedo tirarlo!");              // pull 
  // else if (GetGlobalInt(80)==6)  player.Say("No necesito coger ese objecto."); // pick up
  else if (GetGlobalInt(80)==7)   player.Say("Eso no se puede usar!");          // use   
  //else if (GetGlobalInt(80)==8)   player.Say("Que objeto interesante!");        // lookat 
  //else if (GetGlobalInt(80)==9)   player.Say("Eso es imposible!");              // talk
 }
 #sectionend unhandled2  // DO NOT EDIT OR REMOVE THIS LINE


#sectionstart game_start  // DO NOT EDIT OR REMOVE THIS LINE
function game_start() {
  // called when the game starts, before the first room is loaded 
    
  Game.SpeechFont=eFontFont5Latin;
  Mouse.Mode=eModeWalkto;   
  if (Game.TranslationFilename != null) 
    Game.Name=GetTranslation("Monkey Island 2.5 El Parque de las Pesadillas");
    
  game.items_per_line=4;
  game.num_inv_displayed=8; 
  character[0].SetAsPlayer(); 
  
  bUp.Visible=false;
  bDown.Visible=false;  
  
  bSaveOpt.Visible=false;
  bLoadOpt.Visible=false;
  
  
   //change sprites & position buttons for GUI in other languages
  if (Game.TranslationFilename=="Italian") {       //ITALIAN
    
    bGive.NormalGraphic   = 184;    bGive.MouseOverGraphic   = 185;    //
    bPickup.NormalGraphic = 186;    bPickup.MouseOverGraphic = 187;    bPickup.SetPosition(42, 0);
    bUse.NormalGraphic    = 188;    bUse.MouseOverGraphic    = 189;    //
    bOpen.NormalGraphic   = 190;    bOpen.MouseOverGraphic   = 191;    //
    bLookat.NormalGraphic = 192;    bLookat.MouseOverGraphic = 193;    bLookat.SetPosition(42, 16);
    bPush.NormalGraphic   = 194;    bPush.MouseOverGraphic   = 195;    bPush.SetPosition(104, 16);
    bTalkto.NormalGraphic = 196;    bTalkto.MouseOverGraphic = 197;    bTalkto.SetPosition(2, 32);
    bClose.NormalGraphic  = 198;    bClose.MouseOverGraphic  = 199;    bClose.SetPosition(42, 32);
    bPull.NormalGraphic   = 200;    bPull.MouseOverGraphic   = 201;    //    
  } 
     
    // Here!!!: insert code for other languages */
     
  /* else if (Game.TranslationFilename=="Other Languages Winsetup"){
     } 
    // END ---> Here!!!: insert code for other languages */
  
}
#sectionend game_start  // DO NOT EDIT OR REMOVE THIS LINE  


#sectionstart repeatedly_execute  // DO NOT EDIT OR REMOVE THIS LINE
function repeatedly_execute() 
{
  if (HasPlayerBeenInRoom(3)) 
  {
    if (GetLocationType(mouse.x, mouse.y)==eLocationHotspot) 
    { 
      if (mouse.Mode == eModeUseinv) 
        return;     
      else if (mouse.Mode == eModeLookat) 
        mouse.Mode=eModeLookat; 
      else 
        mouse.Mode=eModeWalkto;
    } 
    else
      GetCursorMode(); 
  }  
  
  string buffer;
  string madetext; string buffer2;
  int cur_mode;    
  cur_mode = GetCursorMode(); 
   

  if (cur_mode == MODE_WALK)
    StrCat(madetext,"Ir a ");
  else if (cur_mode == MODE_LOOK)
    StrCat (madetext,"Mirar ");
  else if ((cur_mode == MODE_USE) && (GetGlobalInt(1)==1))
    StrCat(madetext,"Usar ");
  else if ((cur_mode == MODE_USE) && (GetGlobalInt(1)==0))
    StrCat(madetext,"Dar ");
  else if (cur_mode == MODE_TALK)
    StrCat(madetext,"Hablar con ");
  else if (cur_mode == MODE_PICKUP)
    StrCat(madetext,"Coger ");
  else if ((cur_mode == 4) && (GetGlobalInt(1)==1)) {
    StrCat(madetext,GetTranslation("Usar "));
    GetInvName (player.activeinv, buffer);
    StrCat(madetext,buffer);
    StrCat(madetext,GetTranslation(" con "));
  }
  else if ((cur_mode == 4) && (GetGlobalInt(1)==0)) {
    StrCat(madetext,GetTranslation("Dar "));
    GetInvName (player.activeinv, buffer);
    StrCat(madetext,buffer);
    StrCat(madetext,GetTranslation(" a "));
  }
  else if (cur_mode == 8) {
    if (GetGlobalInt(80) == 1) StrCat(madetext,"Cerrar ");
    if (GetGlobalInt(80) == 2) StrCat(madetext,"Dar ");
    if (GetGlobalInt(80) == 3) StrCat(madetext,"Abrir ");
  }  
  else if (cur_mode == 9) {
    if (GetGlobalInt(80) == 4) StrCat(madetext,"Empujar ");
    if (GetGlobalInt(80) == 5) StrCat(madetext,"Tirar ");
  } 
  
      // code for SetLabelText: on right mouse click ---------------------------- //
  if (mouse.IsButtonDown(eMouseRight)) {
    if (GetLocationType(mouse.x, mouse.y)==eLocationCharacter) {
      GetLocationName(mouse.x,mouse.y,buffer);
      StrCopy (madetext, GetTranslation("Hablar con "));
      StrCat(madetext, buffer);
      SetLabelText ( 0, 0, madetext);  
    } 
    else if (GetLocationType(mouse.x, mouse.y)==eLocationHotspot || eLocationObject) {
      GetLocationName(mouse.x,mouse.y,buffer); 
      StrCopy (madetext, GetTranslation("Mirar "));
      StrCat(madetext, buffer);
      SetLabelText  ( 0, 0, madetext); 
    } 
  } 
       // END: code for SetLabelText: on right mouse click----------------------- //       

  else {    // code: left mouse click 
    InventoryItem *item = InventoryItem.GetAtScreenXY(mouse.x, mouse.y);
    if ( ( (Mouse.Mode==eModeUseinv && GetGlobalInt(1)==0) ) || (Mouse.Mode==eModeInteract && GetGlobalInt(1)==0) 
         || ((Mouse.Mode==eModeInteract && GetGlobalInt(1)==0) && InventoryItem.GetAtScreenXY(mouse.x, mouse.y)==player.ActiveInventory)) {  
      if (item !=null) { 
        GetLocationName(mouse.x,mouse.y,buffer);   
       }
      else if (GetLocationType(mouse.x, mouse.y)!=eLocationCharacter)  {
        GetLocationName(mouse.x,mouse.y,buffer); 
        StrCopy(buffer, ""); 
      }   
      else {      
        GetLocationName(mouse.x,mouse.y,buffer); 
        StrCopy(madetext, GetTranslation(madetext)); 
      }   
    }     
             
    if ( (GetLocationType(mouse.x, mouse.y)!=eLocationCharacter||eLocationHotspot||eLocationObject) 
       && (item != null && (Mouse.Mode==eModePickup || Mouse.Mode==eModeTalkto         
       || Mouse.Mode==eModeUsermode1 || Mouse.Mode == eModeUsermode2) )) 
    {    
      GUIControl *ctrl = GUIControl.GetAtScreenXY(mouse.x, mouse.y);
      if (ctrl==gAreainvgui1)
      {
        if (mouse.Mode == eModeLookat || mouse.Mode == eModeInteract)
          GetCursorMode();
        else 
          mouse.Mode=eModeLookat;
      }     
      else 
        mouse.Mode=eModeLookat;
    } 
    
    if (GetLocationType(mouse.x, mouse.y)!=eLocationCharacter) 
    { 
     // GetLocationName(mouse.x,mouse.y,buffer2); 
      if (item ==null)  
      {
        if (  Mouse.Mode==eModeTalkto || (Mouse.Mode==eModeInteract && GetGlobalInt(1)==0)   ) 
        {
        GetLocationName(mouse.x,mouse.y,buffer); 
        StrCopy(buffer, ""); 
        }  
        else
        {
        GetLocationName(mouse.x,mouse.y,buffer); 
        }          
      }
      
      else if (item !=null)                  
      {                    ///////////////**********************///////////////////////////
        if (mouse.Mode != eModeUseinv)
        {
          GetLocationName(mouse.x,mouse.y,buffer);  
        }  
        else
        {
          StrCopy(buffer, "");
        }    
      }
    } 
         
       
 // Find out what's under the cursor, and add it to the status line
    else  {
      GetLocationName(mouse.x,mouse.y,buffer);
    }    
    StrCopy(madetext, GetTranslation(madetext));     
    
    //disable Give on inventory/objects
    if (GetLocationType(mouse.x, mouse.y)==eLocationObject || player.ActiveInventory!=null) 
    {
      if (Mouse.Mode==eModeUseinv && GetGlobalInt(1)==0)             
        StrCopy(buffer, "");
      else if (Mouse.Mode==eModeUseinv && GetGlobalInt(1)==1)
      {
        if (InventoryItem.GetAtScreenXY(mouse.x, mouse.y)==player.ActiveInventory)
          StrCopy(buffer, "");
        else
        GetLocationName(mouse.x,mouse.y,buffer);
      }
    } 
    
    StrCat(madetext,buffer);     
    SetLabelText ( 0, 0, madetext);  
  }    
}  
#sectionend repeatedly_execute  // DO NOT EDIT OR REMOVE THIS LINE


#sectionstart on_key_press  // DO NOT EDIT OR REMOVE THIS LINE
function on_key_press(int keycode) {
  // called when a key is pressed. keycode holds the key's ASCII code   
  if (keycode == eKeyCtrlS) Debug (0, 0);                     // Ctrl-S, give all inventory
  if (keycode == eKeyCtrlV) Debug (1, 0);                     // Ctrl-V, version
  if (keycode == eKeyCtrlA) Debug (2, 0);                     // Ctrl-A, show walkable areas
  if (keycode == eKeyCtrlX) Debug (3, 0);                     // Ctrl-X, teleport to room  

  if (keycode == eKeySpace)
  {
    // SPACEBAR
    if (!IsGamePaused()) {
      PauseGame();
      gui[0].Transparency=100;
      gui[1].Transparency=100;
      mouse.Visible=false;
      gPaused.Visible=true;          
    }
    else {
      gPaused.Visible=false;
      mouse.Visible=true;
      UnPauseGame(); 
      gui[0].Transparency=0; 
      gui[1].Transparency=0;    
    }
  }  
  
  if (keycode == eKeyF5) {
    gOptions.Visible=true;
  }  
}
#sectionend on_key_press  // DO NOT EDIT OR REMOVE THIS LINE


#sectionstart on_mouse_click  // DO NOT EDIT OR REMOVE THIS LINE
function on_mouse_click(int button) {
  // called when a mouse button is clicked. button is either LEFT or RIGHT
  
  if (IsGamePaused() == 1) // Game is paused, so do nothing (ie. don't allow mouse click)
  { 
    return;
  }
  else if (button==LEFT)  // Left click
  {       
    if ( ( (Mouse.Mode==eModeUseinv && GetGlobalInt(1)==0) ) || (Mouse.Mode==eModeInteract && GetGlobalInt(1)==0)  
      || ((Mouse.Mode==eModeInteract && GetGlobalInt(1)==0) && InventoryItem.GetAtScreenXY(mouse.x, mouse.y)==player.ActiveInventory)
      || Mouse.Mode==eModeTalkto) {  
       if ( GetLocationType(mouse.x, mouse.y)!=eLocationCharacter) {      
         notGiveItemInventoryOnAnother();  
       } 
       else {     
         ProcessClick(mouse.x, mouse.y, GetCursorMode()); 
         SetCursorMode(MODE_WALK);
       } 
    }  
    else {      
      ProcessClick(mouse.x, mouse.y, GetCursorMode());  
      SetCursorMode(MODE_WALK);
    }    
  }
  else if (button==RIGHT)  // right-click
  {
    if (GetLocationType(mouse.x, mouse.y)==eLocationCharacter) {
      SetGlobalInt(80,9);
      ProcessClick(mouse.x, mouse.y, MODE_TALK);
    }  
    else if (GetLocationType(mouse.x, mouse.y)==eLocationHotspot || eLocationObject)  { 
      SetGlobalInt(80,8); 
      ProcessClick(mouse.x, mouse.y, MODE_LOOK);     
    }   
  }
}
#sectionend on_mouse_click  // DO NOT EDIT OR REMOVE THIS LINE


#sectionstart interface_click  // DO NOT EDIT OR REMOVE THIS LINE
function interface_click(int interface, int button) {
  // this GUI system uses GlobalInt 80 to store which of the extended
  // modes is in use (close, give, push, pull, etc)


  if (interface == 1) {
    if (button == 0) {   // Give
      Mouse.Mode=eModeInteract; //SetCursorMode(2);
      SetGlobalInt(1,0);
      SetGlobalInt(80,2);      
    }
    if (button == 1) {   // Open
      Mouse.Mode=eModeUsermode1; //SetCursorMode(8);
      SetGlobalInt(80,3);
    }
    if (button == 2) {   // Lookat
      Mouse.Mode=eModeLookat; //SetCursorMode(1);
      SetGlobalInt(80,8);
    }
    if (button == 6) {   // Use
      Mouse.Mode=eModeInteract; //SetCursorMode(2);
      SetGlobalInt(1,1);
      SetGlobalInt(80,7);      
    }
    if (button == 4) {   // Close
      Mouse.Mode=eModeUsermode1; //SetCursorMode(8);
      SetGlobalInt(80,1);
    }   
    if (button == 5) {   // Push
      Mouse.Mode=eModeUsermode2; //SetCursorMode(8);
      SetGlobalInt(80,4);
    }
    if (button == 7) {   // Pickup
      Mouse.Mode=eModePickup; //SetCursorMode(5);
      SetGlobalInt(80,6);
    }
    if (button == 3) {   // Talkto
      Mouse.Mode=eModeTalkto; //SetCursorMode(3);
      SetGlobalInt(80,9);
    }
    if (button == 8) {   // Pull
      Mouse.Mode=eModeUsermode2; //SetCursorMode(8);
      SetGlobalInt(80,5);
    }

    if (button==9) {    // UP arrow
      if (game.top_inv_item>0)
        game.top_inv_item=game.top_inv_item-game.items_per_line;
    } 
    else if (button==10) { // DOWN arrow
      if (game.top_inv_item < game.num_inv_items-game.num_inv_displayed)
        game.top_inv_item=game.top_inv_item+game.items_per_line;
    } 
  }    
}
#sectionend interface_click  // DO NOT EDIT OR REMOVE THIS LINE


function dialog_request(int param) {
}



function iRamita_Look()
{
  cEgo.Say("Es la ramita que me dio Dread!");
}

function iRamita_UseInv()
{
  unhandled_event(2, 3);
}


function iLista_Look()
{
  cEgo.Say("A ver...");
  
  Wait(5);
  if (player.HasInventory(iBotellaGrog))
    player.Say("Botella de Grog... Vale! Lo tengo!");    
  else      
    player.Say("Botella de Grog..."); 
    
  Wait(5);
  if (player.HasInventory(iCera))
    player.Say("Cera... Vale! Lo tengo!"); 
  else
  player.Say("Cera...");    
  
  Wait(5);
  if (player.HasInventory(iCerveza))
    player.Say("Cerveza de Raiz... Vale! Lo tengo!");   
  else    
    player.Say("Cerveza de Raiz...");    
}

function iLista_UseInv()
{
  unhandled_event(2, 3);
}


function iPesca_Look()
{
  cEgo.Say("Cuanta cuerda... Con ella vere si puedo pescar algo!");
}

function iPesca_UseInv()
{
  unhandled_event(2, 3);
}

function iCera_Look()
{
  cEgo.Say("Es tan solo Cera! No se para que la querra Dread!");
}

function iCera_UseInv()
{
  unhandled_event(2, 3);
}


function iBotellaGrog_Look()
{
  cEgo.Say("Grog! Grog! Grog!");
}

function iBotellaGrog_UseInv()
{
  unhandled_event(2, 3);
}


function iCerveza_Look()
{
  cEgo.Say("Sera de calidad? Tendre que preguntarle a la hechicera!");
}

function iCerveza_UseInv()
{
  unhandled_event(2, 3);
}



function gOptions_OnClick(GUIControl *control, MouseButton button)
{
  /*
  if (control==bSaveOpt)	{
		//save game
		gOptions.Visible=false;
		gSave.Visible=true;
	}
	if (control==bLoadOpt)	{
		//load game    
      
		gOptions.Visible=false;
		gRestore.Visible=true;
	}  
  */
  
	if (control==bRestartOpt)	{
		// restart game
    //gOptions.Visible=false;
    gOptions.Clickable=false;
		gRestart.Visible=true;
	}
	if (control==bPlayOpt)	{
		// continue playing
		gOptions.Visible=false;
	}
	if (control==bExitOpt)	{
		// exit
    //gOptions.Visible=false;
    gOptions.Clickable=false;
		gConfirmexit.Visible=true;
	}
}


function gConfirmexit_OnClick(GUIControl *control, MouseButton button)
{ 
  if (control==bYesExit) {
    QuitGame(0);
	} 
  if (control==bNoExit)	 {
    gConfirmexit.Visible=false;
    gOptions.Visible=false;
    gOptions.Clickable=true;
  }	
}

function gRestart_OnClick(GUIControl *control, MouseButton button)
{
  if (control==bYesRestart) {
    RestartGame();
	} 
  if (control==bNoRestart)	 {
    gRestart.Visible=false;
    gOptions.Visible=false;
    gOptions.Clickable=true;
  }	
}
